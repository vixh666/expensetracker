{"ast":null,"code":"var _jsxFileName = \"D:\\\\desktop\\\\tracker\\\\my-expense-tracker\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n// import PieChart from './PieChart';\n// import Footer from './Footer'; // Import the Footer component\n// import './Home.css';\n\n// const Home = () => {\n//   const [income, setIncome] = useState('');\n//   const [expenses, setExpenses] = useState([]);\n//   const [expenseDate, setExpenseDate] = useState('');\n//   const [expenseTime, setExpenseTime] = useState('');\n//   const [expenseAmount, setExpenseAmount] = useState('');\n//   const [expenseMode, setExpenseMode] = useState('');\n//   const [expenseType, setExpenseType] = useState('');\n//   const [currentTime, setCurrentTime] = useState('');\n\n//   useEffect(() => {\n//     const updateCurrentTime = () => {\n//       const now = new Date();\n//       setCurrentTime(now.toLocaleTimeString());\n//     };\n\n//     const timer = setInterval(updateCurrentTime, 1000);\n//     updateCurrentTime();\n//     return () => clearInterval(timer);\n//   }, []);\n\n//   const handleAddIncome = () => {\n//     setIncome(parseInt(income) || 0);\n//   };\n\n//   const handleAddExpense = () => {\n//     if (expenseDate && expenseTime && expenseAmount && expenseMode && expenseType) {\n//       setExpenses([...expenses, { date: expenseDate, time: expenseTime, amount: parseInt(expenseAmount), mode: expenseMode, type: expenseType }]);\n//       setExpenseDate('');\n//       setExpenseTime('');\n//       setExpenseAmount('');\n//       setExpenseMode('');\n//       setExpenseType('');\n//     }\n//   };\n\n//   const handleDeleteExpense = (index) => {\n//     const newExpenses = expenses.filter((_, i) => i !== index);\n//     setExpenses(newExpenses);\n//   };\n\n//   const totalExpenses = expenses.reduce((acc, expense) => acc + expense.amount, 0);\n//   const balance = income - totalExpenses;\n\n//   const exportPDF = () => {\n//     const doc = new jsPDF();\n//     doc.setFontSize(12);\n//     doc.text('Expense Report', 14, 16);\n\n//     doc.autoTable({\n//       startY: 25,\n//       head: [['Date', 'Time', 'Amount', 'Mode', 'Type']],\n//       body: expenses.map(expense => [expense.date, expense.time, expense.amount, expense.mode, expense.type]),\n//       didDrawPage: (data) => {\n//         doc.text(`Total Expenses: ${totalExpenses}`, 14, data.cursor.y + 10);\n//         doc.text(`Balance: ${balance}`, 14, data.cursor.y + 20);\n//       }\n//     });\n\n//     doc.save('expense-report.pdf');\n//   };\n\n//   return (\n//     <div className=\"home-container\">\n//       <div className=\"home-content\">\n//         {/* Input forms and buttons */}\n//         <div className=\"input-box\">\n//           <div className=\"form-group\">\n//             <label htmlFor=\"income\">Income:</label>\n//             <input\n//               type=\"number\"\n//               id=\"income\"\n//               value={income}\n//               onChange={(e) => setIncome(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Your Income\"\n//             />\n//             <button onClick={handleAddIncome} className=\"button\">Add Income</button>\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseDate\">Date:</label>\n//             <input\n//               type=\"date\"\n//               id=\"expenseDate\"\n//               value={expenseDate}\n//               onChange={(e) => setExpenseDate(e.target.value)}\n//               className=\"input-field\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseTime\">Time:</label>\n//             <input\n//               type=\"time\"\n//               id=\"expenseTime\"\n//               value={expenseTime}\n//               onChange={(e) => setExpenseTime(e.target.value)}\n//               className=\"input-field\"\n//             />\n//             <div id=\"currentTime\" className=\"time-container\">\n//               Current Time: {currentTime}\n//             </div>\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseAmount\">Amount:</label>\n//             <input\n//               type=\"number\"\n//               id=\"expenseAmount\"\n//               value={expenseAmount}\n//               onChange={(e) => setExpenseAmount(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Amount\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseMode\">Payment Method:</label>\n//             <select\n//               id=\"expenseMode\"\n//               value={expenseMode}\n//               onChange={(e) => setExpenseMode(e.target.value)}\n//               className=\"input-field\"\n//             >\n//               <option value=\"\">Select Mode</option>\n//               <option value=\"Cash\">Cash</option>\n//               <option value=\"CreditCard\">Credit Card</option>\n//               <option value=\"DebitCard\">Debit Card</option>\n//               <option value=\"BankTransfer\">Bank Transfer</option>\n//               <option value=\"UPI\">UPI</option>\n//             </select>\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseType\">Type:</label>\n//             <input\n//               type=\"text\"\n//               id=\"expenseType\"\n//               value={expenseType}\n//               onChange={(e) => setExpenseType(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Type of Expense\"\n//             />\n//           </div>\n//           <button onClick={handleAddExpense} className=\"button\">Add Expense</button>\n//         </div>\n\n//         <div className=\"table-container\">\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Your Income</th>\n//                 <th>{income}</th>\n//                 <th></th>\n//               </tr>\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Time</th>\n//                 <th>Amount</th>\n//                 <th>Mode</th>\n//                 <th>Type</th>\n//                 <th>Action</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {expenses.map((expense, index) => (\n//                 <tr key={index}>\n//                   <td>{expense.date}</td>\n//                   <td>{expense.time}</td>\n//                   <td>{expense.amount}</td>\n//                   <td>{expense.mode}</td>\n//                   <td>{expense.type}</td>\n//                   <td>\n//                     <button className=\"delete-btn\" onClick={() => handleDeleteExpense(index)}>Delete</button>\n//                   </td>\n//                 </tr>\n//               ))}\n//               <tr>\n//                 <td>Total Expenses:</td>\n//                 <td>{totalExpenses}</td>\n//                 <td></td>\n//                 <td></td>\n//                 <td></td>\n//               </tr>\n//               <tr>\n//                 <td>Balance:</td>\n//                 <td>{balance}</td>\n//                 <td></td>\n//                 <td></td>\n//                 <td></td>\n//               </tr>\n//             </tbody>\n//           </table>\n//         </div>\n//         <button onClick={exportPDF} className=\"button\">Export to PDF</button>\n//         <PieChart data={expenses} /> {/* Include the PieChart component */}\n//       </div>\n//       <br></br>\n//       <Footer /> {/* Include the Footer component */}\n//     </div>\n//   );\n// };\n\n// export default Home;\n// import React, { useState } from 'react';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n// import PieChart from './PieChart';\n// import Footer from './Footer'; // Import the Footer component\n// import './Home.css';\n\n// const Home = () => {\n//   const [income, setIncome] = useState('');\n//   const [expenses, setExpenses] = useState([]);\n//   const [expenseDate, setExpenseDate] = useState('');\n//   const [expenseTime, setExpenseTime] = useState('');\n//   const [expenseAmount, setExpenseAmount] = useState('');\n//   const [expenseMode, setExpenseMode] = useState('');\n//   const [expenseType, setExpenseType] = useState('');\n\n//   const handleAddIncome = () => {\n//     setIncome(parseInt(income) || 0);\n//   };\n\n//   const handleAddExpense = () => {\n//     if (expenseDate && expenseTime && expenseAmount && expenseMode && expenseType) {\n//       setExpenses([...expenses, { date: expenseDate, time: expenseTime, amount: parseInt(expenseAmount), mode: expenseMode, type: expenseType }]);\n//       setExpenseDate('');\n//       setExpenseTime('');\n//       setExpenseAmount('');\n//       setExpenseMode('');\n//       setExpenseType('');\n//     }\n//   };\n\n//   const handleDeleteExpense = (index) => {\n//     const newExpenses = expenses.filter((_, i) => i !== index);\n//     setExpenses(newExpenses);\n//   };\n\n//   const totalExpenses = expenses.reduce((acc, expense) => acc + expense.amount, 0);\n//   const balance = income - totalExpenses;\n\n//   const exportPDF = () => {\n//     const doc = new jsPDF();\n//     doc.setFontSize(12);\n//     doc.text('Expense Report', 14, 16);\n\n//     doc.autoTable({\n//       startY: 25,\n//       head: [['Date', 'Time', 'Amount', 'Mode', 'Type']],\n//       body: expenses.map(expense => [expense.date, expense.time, expense.amount, expense.mode, expense.type]),\n//       didDrawPage: (data) => {\n//         doc.text(`Total Expenses: ${totalExpenses}`, 14, data.cursor.y + 10);\n//         doc.text(`Balance: ${balance}`, 14, data.cursor.y + 20);\n//       }\n//     });\n\n//     doc.save('expense-report.pdf');\n//   };\n\n//   return (\n//     <div className=\"home-container\">\n//       <div className=\"home-content\">\n//         {/* Input forms and buttons */}\n//         <div className=\"input-box\">\n//           <div className=\"form-group\">\n//             <label htmlFor=\"income\">Income:</label>\n//             <input\n//               type=\"number\"\n//               id=\"income\"\n//               value={income}\n//               onChange={(e) => setIncome(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Your Income\"\n//             />\n//             <button onClick={handleAddIncome} className=\"button\">Add Income</button>\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseDate\">Date:</label>\n//             <input\n//               type=\"date\"\n//               id=\"expenseDate\"\n//               value={expenseDate}\n//               onChange={(e) => setExpenseDate(e.target.value)}\n//               className=\"input-field\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseTime\">Time:</label>\n//             <input\n//               type=\"time\"\n//               id=\"expenseTime\"\n//               value={expenseTime}\n//               onChange={(e) => setExpenseTime(e.target.value)}\n//               className=\"input-field\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseAmount\">Amount:</label>\n//             <input\n//               type=\"number\"\n//               id=\"expenseAmount\"\n//               value={expenseAmount}\n//               onChange={(e) => setExpenseAmount(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Amount\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseMode\">Payment Method:</label>\n//             <select\n//               id=\"expenseMode\"\n//               value={expenseMode}\n//               onChange={(e) => setExpenseMode(e.target.value)}\n//               className=\"input-field\"\n//             >\n//               <option value=\"\">Select Mode</option>\n//               <option value=\"Cash\">Cash</option>\n//               <option value=\"CreditCard\">Credit Card</option>\n//               <option value=\"DebitCard\">Debit Card</option>\n//               <option value=\"BankTransfer\">Bank Transfer</option>\n//               <option value=\"UPI\">UPI</option>\n//             </select>\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseType\">Type:</label>\n//             <input\n//               type=\"text\"\n//               id=\"expenseType\"\n//               value={expenseType}\n//               onChange={(e) => setExpenseType(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Type of Expense\"\n//             />\n//           </div>\n//           <button onClick={handleAddExpense} className=\"button\">Add Expense</button>\n//         </div>\n\n//         <div className=\"table-container\">\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Your Income</th>\n//                 <th>{income}</th>\n//                 <th></th>\n//               </tr>\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Time</th>\n//                 <th>Amount</th>\n//                 <th>Mode</th>\n//                 <th>Type</th>\n//                 <th>Action</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {expenses.map((expense, index) => (\n//                 <tr key={index}>\n//                   <td>{expense.date}</td>\n//                   <td>{expense.time}</td>\n//                   <td>{expense.amount}</td>\n//                   <td>{expense.mode}</td>\n//                   <td>{expense.type}</td>\n//                   <td>\n//                     <button className=\"delete-btn\" onClick={() => handleDeleteExpense(index)}>Delete</button>\n//                   </td>\n//                 </tr>\n//               ))}\n//               <tr>\n//                 <td>Total Expenses:</td>\n//                 <td>{totalExpenses}</td>\n//                 <td></td>\n//                 <td></td>\n//                 <td></td>\n//               </tr>\n//               <tr>\n//                 <td>Balance:</td>\n//                 <td>{balance}</td>\n//                 <td></td>\n//                 <td></td>\n//                 <td></td>\n//               </tr>\n//             </tbody>\n//           </table>\n//         </div>\n//         <button onClick={exportPDF} className=\"button\">Export to PDF</button>\n//         <PieChart data={expenses} /> {/* Include the PieChart component */}\n//       </div>\n//       <Footer /> {/* Include the Footer component */}\n//     </div>\n//   );\n// };\n\n// export default Home;\n// import React, { useState, useEffect } from 'react';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n// import PieChart from './PieChart';\n// import Footer from './Footer'; // Import the Footer component\n// import apiService from './apiService'; // Import the API service\n// import './Home.css';\n\n// const Home = () => {\n//   const [income, setIncome] = useState('');\n//   const [expenses, setExpenses] = useState([]);\n//   const [expenseDate, setExpenseDate] = useState('');\n//   const [expenseTime, setExpenseTime] = useState('');\n//   const [expenseAmount, setExpenseAmount] = useState('');\n//   const [expenseMode, setExpenseMode] = useState('');\n//   const [expenseType, setExpenseType] = useState('');\n//   const [userId, setUserId] = useState(''); // Add userId state\n//   const [error, setError] = useState(''); // Add error state for debugging\n\n//   useEffect(() => {\n//     // Fetch user ID from local storage or authentication context\n//     const storedUserId = localStorage.getItem('userId'); // or use context\n//     setUserId(storedUserId);\n\n//     // Fetch expenses for the user if userId is available\n//     if (storedUserId) {\n//       apiService.getExpenses(storedUserId)\n//         .then(response => {\n//           setExpenses(response.data);\n//         })\n//         .catch(err => {\n//           console.error('Error fetching expenses:', err);\n//           setError('Failed to fetch expenses.');\n//         });\n//     }\n//   }, []);\n\n//   const handleAddIncome = () => {\n//     setIncome(parseInt(income) || 0);\n//   };\n\n//   const handleAddExpense = () => {\n//     if (expenseDate && expenseTime && expenseAmount && expenseMode && expenseType && userId) {\n//       const newExpense = {\n//         date: expenseDate,\n//         time: expenseTime,\n//         amount: parseInt(expenseAmount),\n//         mode: expenseMode,\n//         type: expenseType,\n//         userId: userId\n//       };\n\n//       apiService.addExpense(newExpense)\n//         .then(response => {\n//           console.log('Expense added successfully:', response.data); // Debugging\n//           setExpenses([...expenses, response.data]);\n//           setExpenseDate('');\n//           setExpenseTime('');\n//           setExpenseAmount('');\n//           setExpenseMode('');\n//           setExpenseType('');\n//         })\n//         .catch(err => {\n//           console.error('Error adding expense:', err);\n//           setError('Failed to add expense.');\n//         });\n//     } else {\n//       setError('Please fill in all fields.');\n//     }\n//   };\n\n//   const handleDeleteExpense = (id) => {\n//     apiService.deleteExpense(id)\n//       .then(() => {\n//         setExpenses(expenses.filter(expense => expense.id !== id));\n//       })\n//       .catch(err => {\n//         console.error('Error deleting expense:', err);\n//         setError('Failed to delete expense.');\n//       });\n//   };\n\n//   const totalExpenses = expenses.reduce((acc, expense) => acc + expense.amount, 0);\n//   const balance = income - totalExpenses;\n\n//   const exportPDF = () => {\n//     const doc = new jsPDF();\n//     doc.setFontSize(12);\n//     doc.text('Expense Report', 14, 16);\n\n//     doc.autoTable({\n//       startY: 25,\n//       head: [['Date', 'Time', 'Amount', 'Mode', 'Type']],\n//       body: expenses.map(expense => [expense.date, expense.time, expense.amount, expense.mode, expense.type]),\n//       didDrawPage: (data) => {\n//         doc.text(`Total Expenses: ${totalExpenses}`, 14, data.cursor.y + 10);\n//         doc.text(`Balance: ${balance}`, 14, data.cursor.y + 20);\n//       }\n//     });\n\n//     doc.save('expense-report.pdf');\n//   };\n\n//   return (\n//     <div className=\"home-container\">\n//       <div className=\"home-content\">\n//         {/* Display any error messages */}\n//         {error && <div className=\"error-message\">{error}</div>}\n\n//         {/* Input forms and buttons */}\n//         <div className=\"input-box\">\n//           <div className=\"form-group\">\n//             <label htmlFor=\"income\">Income:</label>\n//             <input\n//               type=\"number\"\n//               id=\"income\"\n//               value={income}\n//               onChange={(e) => setIncome(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Your Income\"\n//             />\n//             <button onClick={handleAddIncome} className=\"button\">Add Income</button>\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseDate\">Date:</label>\n//             <input\n//               type=\"date\"\n//               id=\"expenseDate\"\n//               value={expenseDate}\n//               onChange={(e) => setExpenseDate(e.target.value)}\n//               className=\"input-field\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseTime\">Time:</label>\n//             <input\n//               type=\"time\"\n//               id=\"expenseTime\"\n//               value={expenseTime}\n//               onChange={(e) => setExpenseTime(e.target.value)}\n//               className=\"input-field\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseAmount\">Amount:</label>\n//             <input\n//               type=\"number\"\n//               id=\"expenseAmount\"\n//               value={expenseAmount}\n//               onChange={(e) => setExpenseAmount(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Amount\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseMode\">Payment Method:</label>\n//             <select\n//               id=\"expenseMode\"\n//               value={expenseMode}\n//               onChange={(e) => setExpenseMode(e.target.value)}\n//               className=\"input-field\"\n//             >\n//               <option value=\"\">Select Mode</option>\n//               <option value=\"Cash\">Cash</option>\n//               <option value=\"CreditCard\">Credit Card</option>\n//               <option value=\"DebitCard\">Debit Card</option>\n//               <option value=\"BankTransfer\">Bank Transfer</option>\n//               <option value=\"UPI\">UPI</option>\n//             </select>\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"expenseType\">Type:</label>\n//             <input\n//               type=\"text\"\n//               id=\"expenseType\"\n//               value={expenseType}\n//               onChange={(e) => setExpenseType(e.target.value)}\n//               className=\"input-field\"\n//               placeholder=\"Enter Type of Expense\"\n//             />\n//           </div>\n//           <button onClick={handleAddExpense} className=\"button\">Add Expense</button>\n//         </div>\n\n//         <div className=\"table-container\">\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Your Income</th>\n//                 <th>{income}</th>\n//                 <th></th>\n//               </tr>\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Time</th>\n//                 <th>Amount</th>\n//                 <th>Mode</th>\n//                 <th>Type</th>\n//                 <th>Action</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {expenses.map((expense) => (\n//                 <tr key={expense.id}>\n//                   <td>{expense.date}</td>\n//                   <td>{expense.time}</td>\n//                   <td>{expense.amount}</td>\n//                   <td>{expense.mode}</td>\n//                   <td>{expense.type}</td>\n//                   <td>\n//                     <button className=\"delete-btn\" onClick={() => handleDeleteExpense(expense.id)}>Delete</button>\n//                   </td>\n//                 </tr>\n//               ))}\n//               <tr>\n//                 <td>Total Expenses:</td>\n//                 <td>{totalExpenses}</td>\n//                 <td></td>\n//                 <td></td>\n//                 <td></td>\n//               </tr>\n//               <tr>\n//                 <td>Balance:</td>\n//                 <td>{balance}</td>\n//                 <td></td>\n//                 <td></td>\n//                 <td></td>\n//               </tr>\n//             </tbody>\n//           </table>\n//         </div>\n//         <button onClick={exportPDF} className=\"button\">Export to PDF</button>\n//         <PieChart data={expenses} /> {/* Include the PieChart component */}\n//       </div>\n//       <Footer /> {/* Include the Footer component */}\n//     </div>\n//   );\n// };\n\n// export default Home;\n// Home.js\n\nimport React, { useState, useEffect } from 'react';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport PieChart from './PieChart';\nimport Footer from './Footer'; // Import the Footer component\nimport apiService from './apiService'; // Import the API service\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [income, setIncome] = useState('');\n  const [expenses, setExpenses] = useState([]);\n  const [expenseDate, setExpenseDate] = useState('');\n  const [expenseTime, setExpenseTime] = useState('');\n  const [expenseAmount, setExpenseAmount] = useState('');\n  const [expenseMode, setExpenseMode] = useState('');\n  const [expenseType, setExpenseType] = useState('');\n  const [userId, setUserId] = useState(''); // Add userId state\n  const [error, setError] = useState(''); // Add error state for debugging\n\n  useEffect(() => {\n    // Fetch user ID from local storage or authentication context\n    const storedUserId = localStorage.getItem('userId'); // or use context\n    setUserId(storedUserId);\n\n    // Fetch expenses for the user if userId is available\n    if (storedUserId) {\n      apiService.getExpenses(storedUserId).then(response => {\n        setExpenses(response.data);\n      }).catch(err => {\n        console.error('Error fetching expenses:', err);\n        setError('Failed to fetch expenses.');\n      });\n    }\n  }, []);\n  const handleAddIncome = () => {\n    setIncome(parseInt(income) || 0);\n  };\n  const handleAddExpense = () => {\n    if (expenseDate && expenseTime && expenseAmount && expenseMode && expenseType && userId) {\n      const newExpense = {\n        date: expenseDate,\n        time: expenseTime,\n        amount: parseInt(expenseAmount),\n        mode: expenseMode,\n        type: expenseType,\n        userId: userId\n      };\n      apiService.addExpense(newExpense).then(response => {\n        console.log('Expense added successfully:', response.data); // Debugging\n        setExpenses([...expenses, response.data]);\n        setExpenseDate('');\n        setExpenseTime('');\n        setExpenseAmount('');\n        setExpenseMode('');\n        setExpenseType('');\n      }).catch(err => {\n        console.error('Error adding expense:', err);\n        setError('Failed to add expense.');\n      });\n    } else {\n      setError('Please fill in all fields.');\n    }\n  };\n  const handleDeleteExpense = id => {\n    apiService.deleteExpense(id).then(() => {\n      setExpenses(expenses.filter(expense => expense.id !== id));\n    }).catch(err => {\n      console.error('Error deleting expense:', err);\n      setError('Failed to delete expense.');\n    });\n  };\n  const totalExpenses = expenses.reduce((acc, expense) => acc + expense.amount, 0);\n  const balance = income - totalExpenses;\n  const exportPDF = () => {\n    const doc = new jsPDF();\n    doc.setFontSize(12);\n    doc.text('Expense Report', 14, 16);\n    doc.autoTable({\n      startY: 25,\n      head: [['Date', 'Time', 'Amount', 'Mode', 'Type']],\n      body: expenses.map(expense => [expense.date, expense.time, expense.amount, expense.mode, expense.type]),\n      didDrawPage: data => {\n        doc.text(`Total Expenses: ${totalExpenses}`, 14, data.cursor.y + 10);\n        doc.text(`Balance: ${balance}`, 14, data.cursor.y + 20);\n      }\n    });\n    doc.save('expense-report.pdf');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-content\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"income\",\n            children: \"Income:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"income\",\n            value: income,\n            onChange: e => setIncome(e.target.value),\n            className: \"input-field\",\n            placeholder: \"Enter Your Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddIncome,\n            className: \"button\",\n            children: \"Add Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"expenseDate\",\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"expenseDate\",\n            value: expenseDate,\n            onChange: e => setExpenseDate(e.target.value),\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"expenseTime\",\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            id: \"expenseTime\",\n            value: expenseTime,\n            onChange: e => setExpenseTime(e.target.value),\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"expenseAmount\",\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"expenseAmount\",\n            value: expenseAmount,\n            onChange: e => setExpenseAmount(e.target.value),\n            className: \"input-field\",\n            placeholder: \"Enter Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"expenseMode\",\n            children: \"Payment Method:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"expenseMode\",\n            value: expenseMode,\n            onChange: e => setExpenseMode(e.target.value),\n            className: \"input-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 804,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Cash\",\n              children: \"Cash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 805,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"CreditCard\",\n              children: \"Credit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"DebitCard\",\n              children: \"Debit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 807,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"BankTransfer\",\n              children: \"Bank Transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"UPI\",\n              children: \"UPI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"expenseType\",\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"expenseType\",\n            value: expenseType,\n            onChange: e => setExpenseType(e.target.value),\n            className: \"input-field\",\n            placeholder: \"Enter Type of Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddExpense,\n          className: \"button\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Your Income\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: income\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 835,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 836,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 837,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Mode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 838,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 839,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [expenses.map(expense => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: expense.date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 846,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: expense.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 847,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: expense.amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 848,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: expense.mode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 849,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: expense.type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 850,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-btn\",\n                  onClick: () => handleDeleteExpense(expense.id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 852,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 851,\n                columnNumber: 19\n              }, this)]\n            }, expense.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 845,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Total Expenses:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 857,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: totalExpenses\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 860,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 861,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 856,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Balance:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 864,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: balance\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 865,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 866,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 867,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 868,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportPDF,\n        className: \"button\",\n        children: \"Export to PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PieChart, {\n        data: expenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 747,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 746,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"ry5VMTfmTd8dG/4+118OSNxfnds=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","jsPDF","PieChart","Footer","apiService","jsxDEV","_jsxDEV","Home","_s","income","setIncome","expenses","setExpenses","expenseDate","setExpenseDate","expenseTime","setExpenseTime","expenseAmount","setExpenseAmount","expenseMode","setExpenseMode","expenseType","setExpenseType","userId","setUserId","error","setError","storedUserId","localStorage","getItem","getExpenses","then","response","data","catch","err","console","handleAddIncome","parseInt","handleAddExpense","newExpense","date","time","amount","mode","type","addExpense","log","handleDeleteExpense","id","deleteExpense","filter","expense","totalExpenses","reduce","acc","balance","exportPDF","doc","setFontSize","text","autoTable","startY","head","body","map","didDrawPage","cursor","y","save","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/desktop/tracker/my-expense-tracker/src/components/Home.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import jsPDF from 'jspdf';\r\n// import 'jspdf-autotable';\r\n// import PieChart from './PieChart';\r\n// import Footer from './Footer'; // Import the Footer component\r\n// import './Home.css';\r\n\r\n// const Home = () => {\r\n//   const [income, setIncome] = useState('');\r\n//   const [expenses, setExpenses] = useState([]);\r\n//   const [expenseDate, setExpenseDate] = useState('');\r\n//   const [expenseTime, setExpenseTime] = useState('');\r\n//   const [expenseAmount, setExpenseAmount] = useState('');\r\n//   const [expenseMode, setExpenseMode] = useState('');\r\n//   const [expenseType, setExpenseType] = useState('');\r\n//   const [currentTime, setCurrentTime] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const updateCurrentTime = () => {\r\n//       const now = new Date();\r\n//       setCurrentTime(now.toLocaleTimeString());\r\n//     };\r\n\r\n//     const timer = setInterval(updateCurrentTime, 1000);\r\n//     updateCurrentTime();\r\n//     return () => clearInterval(timer);\r\n//   }, []);\r\n\r\n//   const handleAddIncome = () => {\r\n//     setIncome(parseInt(income) || 0);\r\n//   };\r\n\r\n//   const handleAddExpense = () => {\r\n//     if (expenseDate && expenseTime && expenseAmount && expenseMode && expenseType) {\r\n//       setExpenses([...expenses, { date: expenseDate, time: expenseTime, amount: parseInt(expenseAmount), mode: expenseMode, type: expenseType }]);\r\n//       setExpenseDate('');\r\n//       setExpenseTime('');\r\n//       setExpenseAmount('');\r\n//       setExpenseMode('');\r\n//       setExpenseType('');\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteExpense = (index) => {\r\n//     const newExpenses = expenses.filter((_, i) => i !== index);\r\n//     setExpenses(newExpenses);\r\n//   };\r\n\r\n//   const totalExpenses = expenses.reduce((acc, expense) => acc + expense.amount, 0);\r\n//   const balance = income - totalExpenses;\r\n\r\n//   const exportPDF = () => {\r\n//     const doc = new jsPDF();\r\n//     doc.setFontSize(12);\r\n//     doc.text('Expense Report', 14, 16);\r\n\r\n//     doc.autoTable({\r\n//       startY: 25,\r\n//       head: [['Date', 'Time', 'Amount', 'Mode', 'Type']],\r\n//       body: expenses.map(expense => [expense.date, expense.time, expense.amount, expense.mode, expense.type]),\r\n//       didDrawPage: (data) => {\r\n//         doc.text(`Total Expenses: ${totalExpenses}`, 14, data.cursor.y + 10);\r\n//         doc.text(`Balance: ${balance}`, 14, data.cursor.y + 20);\r\n//       }\r\n//     });\r\n\r\n//     doc.save('expense-report.pdf');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"home-container\">\r\n//       <div className=\"home-content\">\r\n//         {/* Input forms and buttons */}\r\n//         <div className=\"input-box\">\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"income\">Income:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               id=\"income\"\r\n//               value={income}\r\n//               onChange={(e) => setIncome(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Your Income\"\r\n//             />\r\n//             <button onClick={handleAddIncome} className=\"button\">Add Income</button>\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseDate\">Date:</label>\r\n//             <input\r\n//               type=\"date\"\r\n//               id=\"expenseDate\"\r\n//               value={expenseDate}\r\n//               onChange={(e) => setExpenseDate(e.target.value)}\r\n//               className=\"input-field\"\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseTime\">Time:</label>\r\n//             <input\r\n//               type=\"time\"\r\n//               id=\"expenseTime\"\r\n//               value={expenseTime}\r\n//               onChange={(e) => setExpenseTime(e.target.value)}\r\n//               className=\"input-field\"\r\n//             />\r\n//             <div id=\"currentTime\" className=\"time-container\">\r\n//               Current Time: {currentTime}\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseAmount\">Amount:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               id=\"expenseAmount\"\r\n//               value={expenseAmount}\r\n//               onChange={(e) => setExpenseAmount(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Amount\"\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseMode\">Payment Method:</label>\r\n//             <select\r\n//               id=\"expenseMode\"\r\n//               value={expenseMode}\r\n//               onChange={(e) => setExpenseMode(e.target.value)}\r\n//               className=\"input-field\"\r\n//             >\r\n//               <option value=\"\">Select Mode</option>\r\n//               <option value=\"Cash\">Cash</option>\r\n//               <option value=\"CreditCard\">Credit Card</option>\r\n//               <option value=\"DebitCard\">Debit Card</option>\r\n//               <option value=\"BankTransfer\">Bank Transfer</option>\r\n//               <option value=\"UPI\">UPI</option>\r\n//             </select>\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseType\">Type:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"expenseType\"\r\n//               value={expenseType}\r\n//               onChange={(e) => setExpenseType(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Type of Expense\"\r\n//             />\r\n//           </div>\r\n//           <button onClick={handleAddExpense} className=\"button\">Add Expense</button>\r\n//         </div>\r\n\r\n//         <div className=\"table-container\">\r\n//           <table>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Your Income</th>\r\n//                 <th>{income}</th>\r\n//                 <th></th>\r\n//               </tr>\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Time</th>\r\n//                 <th>Amount</th>\r\n//                 <th>Mode</th>\r\n//                 <th>Type</th>\r\n//                 <th>Action</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {expenses.map((expense, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{expense.date}</td>\r\n//                   <td>{expense.time}</td>\r\n//                   <td>{expense.amount}</td>\r\n//                   <td>{expense.mode}</td>\r\n//                   <td>{expense.type}</td>\r\n//                   <td>\r\n//                     <button className=\"delete-btn\" onClick={() => handleDeleteExpense(index)}>Delete</button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//               <tr>\r\n//                 <td>Total Expenses:</td>\r\n//                 <td>{totalExpenses}</td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>Balance:</td>\r\n//                 <td>{balance}</td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//               </tr>\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//         <button onClick={exportPDF} className=\"button\">Export to PDF</button>\r\n//         <PieChart data={expenses} /> {/* Include the PieChart component */}\r\n//       </div>\r\n//       <br></br>\r\n//       <Footer /> {/* Include the Footer component */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n// import React, { useState } from 'react';\r\n// import jsPDF from 'jspdf';\r\n// import 'jspdf-autotable';\r\n// import PieChart from './PieChart';\r\n// import Footer from './Footer'; // Import the Footer component\r\n// import './Home.css';\r\n\r\n// const Home = () => {\r\n//   const [income, setIncome] = useState('');\r\n//   const [expenses, setExpenses] = useState([]);\r\n//   const [expenseDate, setExpenseDate] = useState('');\r\n//   const [expenseTime, setExpenseTime] = useState('');\r\n//   const [expenseAmount, setExpenseAmount] = useState('');\r\n//   const [expenseMode, setExpenseMode] = useState('');\r\n//   const [expenseType, setExpenseType] = useState('');\r\n\r\n//   const handleAddIncome = () => {\r\n//     setIncome(parseInt(income) || 0);\r\n//   };\r\n\r\n//   const handleAddExpense = () => {\r\n//     if (expenseDate && expenseTime && expenseAmount && expenseMode && expenseType) {\r\n//       setExpenses([...expenses, { date: expenseDate, time: expenseTime, amount: parseInt(expenseAmount), mode: expenseMode, type: expenseType }]);\r\n//       setExpenseDate('');\r\n//       setExpenseTime('');\r\n//       setExpenseAmount('');\r\n//       setExpenseMode('');\r\n//       setExpenseType('');\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteExpense = (index) => {\r\n//     const newExpenses = expenses.filter((_, i) => i !== index);\r\n//     setExpenses(newExpenses);\r\n//   };\r\n\r\n//   const totalExpenses = expenses.reduce((acc, expense) => acc + expense.amount, 0);\r\n//   const balance = income - totalExpenses;\r\n\r\n//   const exportPDF = () => {\r\n//     const doc = new jsPDF();\r\n//     doc.setFontSize(12);\r\n//     doc.text('Expense Report', 14, 16);\r\n\r\n//     doc.autoTable({\r\n//       startY: 25,\r\n//       head: [['Date', 'Time', 'Amount', 'Mode', 'Type']],\r\n//       body: expenses.map(expense => [expense.date, expense.time, expense.amount, expense.mode, expense.type]),\r\n//       didDrawPage: (data) => {\r\n//         doc.text(`Total Expenses: ${totalExpenses}`, 14, data.cursor.y + 10);\r\n//         doc.text(`Balance: ${balance}`, 14, data.cursor.y + 20);\r\n//       }\r\n//     });\r\n\r\n//     doc.save('expense-report.pdf');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"home-container\">\r\n//       <div className=\"home-content\">\r\n//         {/* Input forms and buttons */}\r\n//         <div className=\"input-box\">\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"income\">Income:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               id=\"income\"\r\n//               value={income}\r\n//               onChange={(e) => setIncome(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Your Income\"\r\n//             />\r\n//             <button onClick={handleAddIncome} className=\"button\">Add Income</button>\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseDate\">Date:</label>\r\n//             <input\r\n//               type=\"date\"\r\n//               id=\"expenseDate\"\r\n//               value={expenseDate}\r\n//               onChange={(e) => setExpenseDate(e.target.value)}\r\n//               className=\"input-field\"\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseTime\">Time:</label>\r\n//             <input\r\n//               type=\"time\"\r\n//               id=\"expenseTime\"\r\n//               value={expenseTime}\r\n//               onChange={(e) => setExpenseTime(e.target.value)}\r\n//               className=\"input-field\"\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseAmount\">Amount:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               id=\"expenseAmount\"\r\n//               value={expenseAmount}\r\n//               onChange={(e) => setExpenseAmount(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Amount\"\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseMode\">Payment Method:</label>\r\n//             <select\r\n//               id=\"expenseMode\"\r\n//               value={expenseMode}\r\n//               onChange={(e) => setExpenseMode(e.target.value)}\r\n//               className=\"input-field\"\r\n//             >\r\n//               <option value=\"\">Select Mode</option>\r\n//               <option value=\"Cash\">Cash</option>\r\n//               <option value=\"CreditCard\">Credit Card</option>\r\n//               <option value=\"DebitCard\">Debit Card</option>\r\n//               <option value=\"BankTransfer\">Bank Transfer</option>\r\n//               <option value=\"UPI\">UPI</option>\r\n//             </select>\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseType\">Type:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"expenseType\"\r\n//               value={expenseType}\r\n//               onChange={(e) => setExpenseType(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Type of Expense\"\r\n//             />\r\n//           </div>\r\n//           <button onClick={handleAddExpense} className=\"button\">Add Expense</button>\r\n//         </div>\r\n\r\n//         <div className=\"table-container\">\r\n//           <table>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Your Income</th>\r\n//                 <th>{income}</th>\r\n//                 <th></th>\r\n//               </tr>\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Time</th>\r\n//                 <th>Amount</th>\r\n//                 <th>Mode</th>\r\n//                 <th>Type</th>\r\n//                 <th>Action</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {expenses.map((expense, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{expense.date}</td>\r\n//                   <td>{expense.time}</td>\r\n//                   <td>{expense.amount}</td>\r\n//                   <td>{expense.mode}</td>\r\n//                   <td>{expense.type}</td>\r\n//                   <td>\r\n//                     <button className=\"delete-btn\" onClick={() => handleDeleteExpense(index)}>Delete</button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//               <tr>\r\n//                 <td>Total Expenses:</td>\r\n//                 <td>{totalExpenses}</td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>Balance:</td>\r\n//                 <td>{balance}</td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//               </tr>\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//         <button onClick={exportPDF} className=\"button\">Export to PDF</button>\r\n//         <PieChart data={expenses} /> {/* Include the PieChart component */}\r\n//       </div>\r\n//       <Footer /> {/* Include the Footer component */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n// import React, { useState, useEffect } from 'react';\r\n// import jsPDF from 'jspdf';\r\n// import 'jspdf-autotable';\r\n// import PieChart from './PieChart';\r\n// import Footer from './Footer'; // Import the Footer component\r\n// import apiService from './apiService'; // Import the API service\r\n// import './Home.css';\r\n\r\n// const Home = () => {\r\n//   const [income, setIncome] = useState('');\r\n//   const [expenses, setExpenses] = useState([]);\r\n//   const [expenseDate, setExpenseDate] = useState('');\r\n//   const [expenseTime, setExpenseTime] = useState('');\r\n//   const [expenseAmount, setExpenseAmount] = useState('');\r\n//   const [expenseMode, setExpenseMode] = useState('');\r\n//   const [expenseType, setExpenseType] = useState('');\r\n//   const [userId, setUserId] = useState(''); // Add userId state\r\n//   const [error, setError] = useState(''); // Add error state for debugging\r\n\r\n//   useEffect(() => {\r\n//     // Fetch user ID from local storage or authentication context\r\n//     const storedUserId = localStorage.getItem('userId'); // or use context\r\n//     setUserId(storedUserId);\r\n\r\n//     // Fetch expenses for the user if userId is available\r\n//     if (storedUserId) {\r\n//       apiService.getExpenses(storedUserId)\r\n//         .then(response => {\r\n//           setExpenses(response.data);\r\n//         })\r\n//         .catch(err => {\r\n//           console.error('Error fetching expenses:', err);\r\n//           setError('Failed to fetch expenses.');\r\n//         });\r\n//     }\r\n//   }, []);\r\n\r\n//   const handleAddIncome = () => {\r\n//     setIncome(parseInt(income) || 0);\r\n//   };\r\n\r\n//   const handleAddExpense = () => {\r\n//     if (expenseDate && expenseTime && expenseAmount && expenseMode && expenseType && userId) {\r\n//       const newExpense = {\r\n//         date: expenseDate,\r\n//         time: expenseTime,\r\n//         amount: parseInt(expenseAmount),\r\n//         mode: expenseMode,\r\n//         type: expenseType,\r\n//         userId: userId\r\n//       };\r\n\r\n//       apiService.addExpense(newExpense)\r\n//         .then(response => {\r\n//           console.log('Expense added successfully:', response.data); // Debugging\r\n//           setExpenses([...expenses, response.data]);\r\n//           setExpenseDate('');\r\n//           setExpenseTime('');\r\n//           setExpenseAmount('');\r\n//           setExpenseMode('');\r\n//           setExpenseType('');\r\n//         })\r\n//         .catch(err => {\r\n//           console.error('Error adding expense:', err);\r\n//           setError('Failed to add expense.');\r\n//         });\r\n//     } else {\r\n//       setError('Please fill in all fields.');\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteExpense = (id) => {\r\n//     apiService.deleteExpense(id)\r\n//       .then(() => {\r\n//         setExpenses(expenses.filter(expense => expense.id !== id));\r\n//       })\r\n//       .catch(err => {\r\n//         console.error('Error deleting expense:', err);\r\n//         setError('Failed to delete expense.');\r\n//       });\r\n//   };\r\n\r\n//   const totalExpenses = expenses.reduce((acc, expense) => acc + expense.amount, 0);\r\n//   const balance = income - totalExpenses;\r\n\r\n//   const exportPDF = () => {\r\n//     const doc = new jsPDF();\r\n//     doc.setFontSize(12);\r\n//     doc.text('Expense Report', 14, 16);\r\n\r\n//     doc.autoTable({\r\n//       startY: 25,\r\n//       head: [['Date', 'Time', 'Amount', 'Mode', 'Type']],\r\n//       body: expenses.map(expense => [expense.date, expense.time, expense.amount, expense.mode, expense.type]),\r\n//       didDrawPage: (data) => {\r\n//         doc.text(`Total Expenses: ${totalExpenses}`, 14, data.cursor.y + 10);\r\n//         doc.text(`Balance: ${balance}`, 14, data.cursor.y + 20);\r\n//       }\r\n//     });\r\n\r\n//     doc.save('expense-report.pdf');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"home-container\">\r\n//       <div className=\"home-content\">\r\n//         {/* Display any error messages */}\r\n//         {error && <div className=\"error-message\">{error}</div>}\r\n        \r\n//         {/* Input forms and buttons */}\r\n//         <div className=\"input-box\">\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"income\">Income:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               id=\"income\"\r\n//               value={income}\r\n//               onChange={(e) => setIncome(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Your Income\"\r\n//             />\r\n//             <button onClick={handleAddIncome} className=\"button\">Add Income</button>\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseDate\">Date:</label>\r\n//             <input\r\n//               type=\"date\"\r\n//               id=\"expenseDate\"\r\n//               value={expenseDate}\r\n//               onChange={(e) => setExpenseDate(e.target.value)}\r\n//               className=\"input-field\"\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseTime\">Time:</label>\r\n//             <input\r\n//               type=\"time\"\r\n//               id=\"expenseTime\"\r\n//               value={expenseTime}\r\n//               onChange={(e) => setExpenseTime(e.target.value)}\r\n//               className=\"input-field\"\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseAmount\">Amount:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               id=\"expenseAmount\"\r\n//               value={expenseAmount}\r\n//               onChange={(e) => setExpenseAmount(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Amount\"\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseMode\">Payment Method:</label>\r\n//             <select\r\n//               id=\"expenseMode\"\r\n//               value={expenseMode}\r\n//               onChange={(e) => setExpenseMode(e.target.value)}\r\n//               className=\"input-field\"\r\n//             >\r\n//               <option value=\"\">Select Mode</option>\r\n//               <option value=\"Cash\">Cash</option>\r\n//               <option value=\"CreditCard\">Credit Card</option>\r\n//               <option value=\"DebitCard\">Debit Card</option>\r\n//               <option value=\"BankTransfer\">Bank Transfer</option>\r\n//               <option value=\"UPI\">UPI</option>\r\n//             </select>\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"expenseType\">Type:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"expenseType\"\r\n//               value={expenseType}\r\n//               onChange={(e) => setExpenseType(e.target.value)}\r\n//               className=\"input-field\"\r\n//               placeholder=\"Enter Type of Expense\"\r\n//             />\r\n//           </div>\r\n//           <button onClick={handleAddExpense} className=\"button\">Add Expense</button>\r\n//         </div>\r\n\r\n//         <div className=\"table-container\">\r\n//           <table>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Your Income</th>\r\n//                 <th>{income}</th>\r\n//                 <th></th>\r\n//               </tr>\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Time</th>\r\n//                 <th>Amount</th>\r\n//                 <th>Mode</th>\r\n//                 <th>Type</th>\r\n//                 <th>Action</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {expenses.map((expense) => (\r\n//                 <tr key={expense.id}>\r\n//                   <td>{expense.date}</td>\r\n//                   <td>{expense.time}</td>\r\n//                   <td>{expense.amount}</td>\r\n//                   <td>{expense.mode}</td>\r\n//                   <td>{expense.type}</td>\r\n//                   <td>\r\n//                     <button className=\"delete-btn\" onClick={() => handleDeleteExpense(expense.id)}>Delete</button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//               <tr>\r\n//                 <td>Total Expenses:</td>\r\n//                 <td>{totalExpenses}</td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>Balance:</td>\r\n//                 <td>{balance}</td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//                 <td></td>\r\n//               </tr>\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//         <button onClick={exportPDF} className=\"button\">Export to PDF</button>\r\n//         <PieChart data={expenses} /> {/* Include the PieChart component */}\r\n//       </div>\r\n//       <Footer /> {/* Include the Footer component */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n// Home.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport PieChart from './PieChart';\r\nimport Footer from './Footer'; // Import the Footer component\r\nimport apiService from './apiService'; // Import the API service\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  const [income, setIncome] = useState('');\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [expenseDate, setExpenseDate] = useState('');\r\n  const [expenseTime, setExpenseTime] = useState('');\r\n  const [expenseAmount, setExpenseAmount] = useState('');\r\n  const [expenseMode, setExpenseMode] = useState('');\r\n  const [expenseType, setExpenseType] = useState('');\r\n  const [userId, setUserId] = useState(''); // Add userId state\r\n  const [error, setError] = useState(''); // Add error state for debugging\r\n\r\n  useEffect(() => {\r\n    // Fetch user ID from local storage or authentication context\r\n    const storedUserId = localStorage.getItem('userId'); // or use context\r\n    setUserId(storedUserId);\r\n\r\n    // Fetch expenses for the user if userId is available\r\n    if (storedUserId) {\r\n      apiService.getExpenses(storedUserId)\r\n        .then(response => {\r\n          setExpenses(response.data);\r\n        })\r\n        .catch(err => {\r\n          console.error('Error fetching expenses:', err);\r\n          setError('Failed to fetch expenses.');\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const handleAddIncome = () => {\r\n    setIncome(parseInt(income) || 0);\r\n  };\r\n\r\n  const handleAddExpense = () => {\r\n    if (expenseDate && expenseTime && expenseAmount && expenseMode && expenseType && userId) {\r\n      const newExpense = {\r\n        date: expenseDate,\r\n        time: expenseTime,\r\n        amount: parseInt(expenseAmount),\r\n        mode: expenseMode,\r\n        type: expenseType,\r\n        userId: userId\r\n      };\r\n\r\n      apiService.addExpense(newExpense)\r\n        .then(response => {\r\n          console.log('Expense added successfully:', response.data); // Debugging\r\n          setExpenses([...expenses, response.data]);\r\n          setExpenseDate('');\r\n          setExpenseTime('');\r\n          setExpenseAmount('');\r\n          setExpenseMode('');\r\n          setExpenseType('');\r\n        })\r\n        .catch(err => {\r\n          console.error('Error adding expense:', err);\r\n          setError('Failed to add expense.');\r\n        });\r\n    } else {\r\n      setError('Please fill in all fields.');\r\n    }\r\n  };\r\n\r\n  const handleDeleteExpense = (id) => {\r\n    apiService.deleteExpense(id)\r\n      .then(() => {\r\n        setExpenses(expenses.filter(expense => expense.id !== id));\r\n      })\r\n      .catch(err => {\r\n        console.error('Error deleting expense:', err);\r\n        setError('Failed to delete expense.');\r\n      });\r\n  };\r\n\r\n  const totalExpenses = expenses.reduce((acc, expense) => acc + expense.amount, 0);\r\n  const balance = income - totalExpenses;\r\n\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.setFontSize(12);\r\n    doc.text('Expense Report', 14, 16);\r\n\r\n    doc.autoTable({\r\n      startY: 25,\r\n      head: [['Date', 'Time', 'Amount', 'Mode', 'Type']],\r\n      body: expenses.map(expense => [expense.date, expense.time, expense.amount, expense.mode, expense.type]),\r\n      didDrawPage: (data) => {\r\n        doc.text(`Total Expenses: ${totalExpenses}`, 14, data.cursor.y + 10);\r\n        doc.text(`Balance: ${balance}`, 14, data.cursor.y + 20);\r\n      }\r\n    });\r\n\r\n    doc.save('expense-report.pdf');\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"home-content\">\r\n        {/* Display any error messages */}\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        \r\n        {/* Input forms and buttons */}\r\n        <div className=\"input-box\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"income\">Income:</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"income\"\r\n              value={income}\r\n              onChange={(e) => setIncome(e.target.value)}\r\n              className=\"input-field\"\r\n              placeholder=\"Enter Your Income\"\r\n            />\r\n            <button onClick={handleAddIncome} className=\"button\">Add Income</button>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"expenseDate\">Date:</label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"expenseDate\"\r\n              value={expenseDate}\r\n              onChange={(e) => setExpenseDate(e.target.value)}\r\n              className=\"input-field\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"expenseTime\">Time:</label>\r\n            <input\r\n              type=\"time\"\r\n              id=\"expenseTime\"\r\n              value={expenseTime}\r\n              onChange={(e) => setExpenseTime(e.target.value)}\r\n              className=\"input-field\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"expenseAmount\">Amount:</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"expenseAmount\"\r\n              value={expenseAmount}\r\n              onChange={(e) => setExpenseAmount(e.target.value)}\r\n              className=\"input-field\"\r\n              placeholder=\"Enter Amount\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"expenseMode\">Payment Method:</label>\r\n            <select\r\n              id=\"expenseMode\"\r\n              value={expenseMode}\r\n              onChange={(e) => setExpenseMode(e.target.value)}\r\n              className=\"input-field\"\r\n            >\r\n              <option value=\"\">Select Mode</option>\r\n              <option value=\"Cash\">Cash</option>\r\n              <option value=\"CreditCard\">Credit Card</option>\r\n              <option value=\"DebitCard\">Debit Card</option>\r\n              <option value=\"BankTransfer\">Bank Transfer</option>\r\n              <option value=\"UPI\">UPI</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"expenseType\">Type:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"expenseType\"\r\n              value={expenseType}\r\n              onChange={(e) => setExpenseType(e.target.value)}\r\n              className=\"input-field\"\r\n              placeholder=\"Enter Type of Expense\"\r\n            />\r\n          </div>\r\n          <button onClick={handleAddExpense} className=\"button\">Add Expense</button>\r\n        </div>\r\n\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Your Income</th>\r\n                <th>{income}</th>\r\n                <th></th>\r\n              </tr>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Time</th>\r\n                <th>Amount</th>\r\n                <th>Mode</th>\r\n                <th>Type</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {expenses.map((expense) => (\r\n                <tr key={expense.id}>\r\n                  <td>{expense.date}</td>\r\n                  <td>{expense.time}</td>\r\n                  <td>{expense.amount}</td>\r\n                  <td>{expense.mode}</td>\r\n                  <td>{expense.type}</td>\r\n                  <td>\r\n                    <button className=\"delete-btn\" onClick={() => handleDeleteExpense(expense.id)}>Delete</button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n              <tr>\r\n                <td>Total Expenses:</td>\r\n                <td>{totalExpenses}</td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n              </tr>\r\n              <tr>\r\n                <td>Balance:</td>\r\n                <td>{balance}</td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <button onClick={exportPDF} className=\"button\">Export to PDF</button>\r\n        <PieChart data={expenses} /> {/* Include the PieChart component */}\r\n      </div>\r\n      <Footer /> {/* Include the Footer component */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}